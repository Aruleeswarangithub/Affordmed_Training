{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","time","setTime","useState","isRunning","setIsRunning","mode","setMode","quote","setQuote","timerRef","useRef","useEffect","current","setInterval","prevTime","Math","max","clearInterval","handleModeChange","selectedMode","React","createElement","className","onClick","milliseconds","ms","String","padStart","substring","totalSeconds","floor","formatTime","handleStartPause","prev","handleReset","style","width","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"wNAmFeA,MAhFHA,KACV,MAAOC,EAAMC,GAAWC,mBAAS,IAC1BC,EAAWC,GAAgBF,oBAAS,IACpCG,EAAMC,GAAWJ,mBAAS,cAC1BK,EAAOC,GAAYN,mBAAS,kCAC7BO,EAAWC,iBAAO,MAIxBC,oBAAU,KACJR,EACFM,EAASG,QAAUC,YAAY,KAC7BZ,EAASa,GACM,cAATT,EACKU,KAAKC,IAAIF,EAAW,GAAI,GAExBA,EAAW,KAGrB,IAEHG,cAAcR,EAASG,SAElB,IAAMK,cAAcR,EAASG,UACnC,CAACT,EAAWE,IAEf,MAmBMa,EAAoBC,IACxBb,EAAQa,GACRf,GAAa,GACQ,cAAjBe,GACFlB,EA1CsB,KA2CtBO,EAAS,8CAETP,EAAQ,GACRO,EAAS,oCASb,OACEY,IAAAC,cAAA,OAAKC,UAAW,OAAOjB,GACrBe,IAAAC,cAAA,MAAIC,UAAU,SAAQ,mCACtBF,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,UAAQE,QAASA,IAAML,EAAiB,aAAcI,UAAoB,cAATjB,EAAuB,SAAW,IAAI,aACvGe,IAAAC,cAAA,UAAQE,QAASA,IAAML,EAAiB,aAAcI,UAAoB,cAATjB,EAAuB,SAAW,IAAI,cAEzGe,IAAAC,cAAA,OAAKC,UAAU,iBA3CCE,KAClB,MAAMC,EAAKC,OAAOF,EAAe,KAAMG,SAAS,EAAG,KAAKC,UAAU,EAAG,GAC/DC,EAAed,KAAKe,MAAMN,EAAe,KAI/C,MAAO,GAHOE,OAAOX,KAAKe,MAAMD,EAAe,OAAOF,SAAS,EAAG,QAClDD,OAAOX,KAAKe,MAAOD,EAAe,KAAQ,KAAKF,SAAS,EAAG,QAC3DD,OAAOG,EAAe,IAAIF,SAAS,EAAG,QACbF,KAqCPM,CAAW/B,IAC3CoB,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAQE,QApCWS,KACvB5B,EAAc6B,IAAUA,KAmCgB9B,EAAY,QAAU,SAC1DiB,IAAAC,cAAA,UAAQE,QAjCMW,KAClB9B,GAAa,GACaH,EAAb,cAATI,EAlCoB,IAmCX,KA8BqB,UAEhCe,IAAAC,cAAA,OAAKC,UAAU,SAAQ,gBAAGF,IAAAC,cAAA,UAAKd,IAC/Ba,IAAAC,cAAA,OAAKC,UAAU,eAAea,MAAO,CAAEC,MAjB5B,cAAT/B,GAnDoB,IAmDkCL,GAnDlC,IAmD+D,IAAtD,IAC1B,YClDIqC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/B,IAAAC,cAACD,IAAMgC,WAAU,KACfhC,IAAAC,cAACtB,EAAG,QAORsC,K","file":"static/js/main.6efc8cf4.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [mode, setMode] = useState(\"stopwatch\");\n  const [quote, setQuote] = useState(\"Stay focused. Stay determined.\");\n  const timerRef = useRef(null);\n\n  const countdownDuration = 60 * 1000; // 1 minute\n\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setTime((prevTime) => {\n          if (mode === \"countdown\") {\n            return Math.max(prevTime - 10, 0);\n          } else {\n            return prevTime + 10;\n          }\n        });\n      }, 10);\n    } else {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [isRunning, mode]);\n\n  const formatTime = (milliseconds) => {\n    const ms = String(milliseconds % 1000).padStart(3, \"0\").substring(0, 2);\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, \"0\");\n    const minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, \"0\");\n    const seconds = String(totalSeconds % 60).padStart(2, \"0\");\n    return `${hours}:${minutes}:${seconds}:${ms}`;\n  };\n\n  const handleStartPause = () => {\n    setIsRunning((prev) => !prev);\n  };\n\n  const handleReset = () => {\n    setIsRunning(false);\n    if (mode === \"countdown\") setTime(countdownDuration);\n    else setTime(0);\n  };\n\n  const handleModeChange = (selectedMode) => {\n    setMode(selectedMode);\n    setIsRunning(false);\n    if (selectedMode === \"countdown\") {\n      setTime(countdownDuration);\n      setQuote(\"Countdown mode. Make every second count.\");\n    } else {\n      setTime(0);\n      setQuote(\"Stay focused. Stay determined.\");\n    }\n  };\n\n  const getProgressWidth = () => {\n    if (mode === \"countdown\") return `${((countdownDuration - time) / countdownDuration) * 100}%`;\n    return \"100%\";\n  };\n\n  return (\n    <div className={`app ${mode}`}>\n      <h1 className=\"title\">‚è±Ô∏è Animated Timer App</h1>\n      <div className=\"modes\">\n        <button onClick={() => handleModeChange(\"stopwatch\")} className={mode === \"stopwatch\" ? \"active\" : \"\"}>Stopwatch</button>\n        <button onClick={() => handleModeChange(\"countdown\")} className={mode === \"countdown\" ? \"active\" : \"\"}>Countdown</button>\n      </div>\n      <div className=\"timer-display\">{formatTime(time)}</div>\n      <div className=\"controls\">\n        <button onClick={handleStartPause}>{isRunning ? \"Pause\" : \"Start\"}</button>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n      <div className=\"quote\">üí¨ <em>{quote}</em></div>\n      <div className=\"progress-bar\" style={{ width: getProgressWidth() }}></div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}